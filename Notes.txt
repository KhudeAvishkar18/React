JS Course Started - 13th July 2025

React Course Started - 18th August 2025
Deadline to finish - 31st October 2025


React - 

React is a JavaScript Library (Not a framework).
React is used to make web frontend applications.
React is mainly used to make Single Page Application (SPA).
It is developed by Facebook (Meta).
It's current version is React 19.
After React, we can easily learn React Native which is used for App Development (both ios and android).

To use react, we need Nodejs & npm to be installed in our pc
When you install Node js, it automatically installs npm as well.
To check node & npm versions
>node -v
>npm -v


Vite - 

Vite is used to install and setup React project, also to make project builds which can be deployed to production
Vite is fast development server and build tool
To install vite & create a new react project, go to your desired directory where you wants to create a new project and enter 
>npm create vite (Create new react project)
>cd projectName
>npm install (Install node modules)
>npm run dev (To run react website on specific port and get a url)


Diff between Framework and Library is that
Library's flow can be controlled by us but, framework has its own flow/rules, we need to follow that flow/rules only

JSX - JavaScript XML
TSX - TypeScript XML
SWC - Speedy Web Compiler


Files and their use in a React Project - 

package.json -> All the dependencies & devDependencies of our React Project are mentioned in this file.
package-lock.json -> All the nested dependencies of dependencies are stored in this file.
README.md -> It is a readme file in which we can store our project related info, like what it does, which function does what etc.
vite.config.js -> All the configuration of vite is present in this file.
eslint.config.js -> All the configuration of eslint is  present in this file.
.gitignore -> The files which we dont want to upload on git that fileNames/directoryNames are written in this file.

src directory -> This contains below files and assets directory

index.html -> This is entrypoint of browser which load main.jsx file.
main.jsx -> This will put entire react application (App Component) in div tag present in index.html
App.jsx -> This file contains main App component and other sub components.
App.css -> is a css file which is used to give styling to our components.
index.css -> It is also a css file which is imported in main.jsx file.

assets directory -> It contains media files which should not be visible to anyone and are private.
public directory -> It also contains media files which can be available publically.
node modules -> All the packages & libraries used by our react app are present in node modules.


Components - 

React components are JavaScript functions that return markup.
Any website is made of multiple components like header, footer, navbar, main component etc.
When building UI using react, Everything is a component.
A component can contain multiple sub components.
React component names must always start with a capital letter, while HTML tags must be lowercase.
To use component first we need to import it by writing -> import ComponentName from "./ComponentFile"
To use that imported component in our App component -> <ComponentName />
A component is nothing like a javascript function whose name starts with capital letter and which returns some html code. But function & component are not same.

-- Class Based Component
import React, { Component } from 'react';
class Counter extends Component {
  constructor(props) {
    super(props);
    // Define initial state
    this.state = {
      count: 0
    };
  }
  // Method to update state
  increment = () => {
    this.setState({ count: this.state.count + 1 });
  };
  render() {
    return (
      <div>
        <h2>Count: {this.state.count}</h2>
        <button onClick={this.increment}>Increment</button>
      </div>
    );
  }
}
export default Counter;



JSX - JavaScript XML

JSX is a syntax extension for JavaScript that lets you write HTML-like markup inside a JavaScript file.


To upgrade or degrade the version of react in our react project -

1) Open package.json file from react project
2) Inside dependencies, change the react version to the version which you want to work with.
3) Delete the current node modules folder.
4) In terminal, run the command 'npm install' to install the node modules again of specified version. 
5) Now test whether your project works in that specified version, for that run 'npm run dev' command

In a dependency like "react": "^19.1.1", the caret (^) symbol indicates that the version can be updated to any minor or patch version within the same major version, meaning it would install version 19.x.x (such as 19.2.0, 19.2.1, or 19.3.0) but not a new major version like 20.0.0. This allows for automatic updates to bug fixes and performance improvements while preventing breaking changes from major version upgrades.


States -

State is like a component’s memory. It lets a component keep track of some information and change it in response to interactions.
State is a container to store some data just like variables.
States are mutable and dynamic.
To use states, we need to import them first (Variable dont need to import).
If you make any changes to that state, it re-renders react component automatically and updated values will be displayed on webpage.
State itself is a hook.


Hooks -

Functions starting with use are called Hooks.
Hooks are the special features for functional component.
Hooks allow you to use different react features for your components, such as State, lifecycle methods, side effects etc.
Hooks names start with 'use', ex. useState, useId, useContext, useEffect, useRef, useReducer, useActionState, useFormStatus etc.


Uses of useEffect hook - 

1) To remove side effect from inside or outside component
2) To fetch data
3) Used as Life cycle methods
4) Used for DOM Manipulation and much more


The useFormStatus Hook must be called from a component that is rendered inside a html <form>.
useFormStatus will only return status information for a parent <form>. It will not return status information for any <form> rendered in that same component or children components.


Props -

Props are used to pass data to the components.
Props are like arguments you pass to a function. They let a parent component pass data to a child component and customize its appearance. For example, a Form can pass a color prop to a Button.
It is just like parameters we pass to the functions while calling functions, we can pass props while using any component.
Props can be passed as separate variables, object, array etc.


Controlled Components -

A controlled component is a component, which contains a html form (optionally) whose input fields (compulsory) are controlled by React state.
It stores input field value in state variable
Uses onChange event handler on input field
Value attribute of input field is attached with state variable.



Ways of styling in React using CSS

1) Inline style - We can write style attribute inside html elements, in which we can write css properties
2) External style - We can create separate css file and import it in component file
3) CSS Modules - This is similar to external css file, but ensures that styles are written for a specific component
4) Styled Components - Styled components is a library, by using we can directly write css inside JavaScript component (Not inside html element).
5) External framework - We can use frameworks like Tailwind css, React Bootstrap, Material UI etc to style the react components

Q. Can we use internal css in React?




Lifting state up - 

Sometimes, you want the state of two components to always change together. To do it, remove state from both of them, move it to their closest common parent, and then pass it down to them via props. This is known as lifting state up, and it’s one of the most common things you will do writing React code.

Consider a scenario, you have two child components in an App component. And you have to transfer data (state variables) from one component into another.
To do this you cant directly use data (states) from one component in another component, hence you need to declare state variables (data) in parent component
i.e. in App component, so that we can use them in both child components. This scenario is called Lifting state up.




Rules to be followed while creating custom hooks in react -

1) Name should start with 'use' keyword, ex. useHook(), useFetch() etc
2) Use hooks at top level of component, that means scope of hooks should be global within component. Ex. you should not use hook inside if block.
3) Don't call hooks inside conditions or loops
4) Don't call hooks after a conditional return statement
5) Don't call hooks in event handlers
6) Don't call hooks in class components
7) Don't call hooks inside try, catch or finally block
8) Don't call hooks from regular JavaScript function

1. You can call hooks inside functional components
2. You can call predefined or custom hooks inside custom hooks




Install Tailwind CSS in React

1) npm install -D tailwindcss postcss autoprefixer
2) npx tailwindcss init -p

There is some issue while installing the tailwind css, please resolve it.


If you provide a `value` prop to a form field without an `onChange` handler then This will render a read-only input field. That means you cant enter the value inside that input field.



JSON-Server for API Creation

We can use JSON-Server to create apis which can support get, put, post, delete methods.
It is the simplest way as compared to other ways of creation of APIs.
We can also create APIs using another programming languages such as Java, PHP, Python etc, but it will take too much time, hence we use JSON-server.

To install JSON-server -
Go to official GitHub of JSON-server https://github.com/typicode/json-server/tree/v0
there you will find documentation about how to install and run JSON-server

To install json-server, run below command in one directory
>npm install json-server

then create db.json file inside this folder and keep data given in documentation in that file, also you can add your data to create your API

To access that apis first you need to run json-server, for that run below command
>npx json-server db.json

Now there itself inside terminal you will get endpoints of apis present in your json-server
you can copy that endpoints and use in your project or test them by using postman or thunderclient

the url of that api will look like - http://localhost:3000/myNewAPI

Note : You can access these apis until your json-server is running


Calling API from react

Get = fetch(url);
Put = fetch(url + '/' + id, {method : "PUT", body : JSON.stringify(updatedDataObject)});
Post = fetch(url, {method : "POST", body : JSON.stringify(dataObject)});
Delete = fetch(url + '/' + id, {method : "DELETE"});



'use' API in React

use is a React API that lets you read the value of a resource like a Promise or context.
const value = use(resource);
'use' can handle promise and return data from promise
We should use 'use' API with suspense
'use' API can also be used to handle context api
'use' API reduces rerendering of component as compared to useEffect()
unlike useContext(), we can read value of context variable inside conditional like if and loops like for by using use() API.



useReducer() hook - 

const [state, dispatch] = useReducer(reducer, initialArg);
Call useReducer at the top level of your component to manage its state with a reducer.



ErrorBoundary - 

<ErrorBoundary fallback={<p>⚠️Something went wrong</p>}>
  <Suspense fallback={<p>⌛Downloading message...</p>}>
    <Message messagePromise={messagePromise} />
  </Suspense>
</ErrorBoundary>



// React 19 is officially released
// In React 19 some new things came and also some old things modified

// Whats New in React 19

// Actions - useTransition(), useOptimistic(), useActionState(), useFormStatus()
// Actions are the functions that automatically manage form data by using above hooks
// New API - use, prerender, prerenderToNodeStream
// Server Action (Server components are introduced) - Components which are rendered on server side are called server components

// Improvements in old concepts - 

// We can send ref as prop (Previously we have to use forwardRef() to pass 'ref' to child component)
// Better error reporting/responses
// We can render <Context> as a provider instead of <Context.Provider>
// We can add stylesheets by using link tag inside a component
// Support for custom elements
